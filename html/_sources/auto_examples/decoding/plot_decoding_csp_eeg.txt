

.. _sphx_glr_auto_examples_decoding_plot_decoding_csp_eeg.py:


===========================================================================
Motor imagery decoding from EEG data using the Common Spatial Pattern (CSP)
===========================================================================

Decoding of motor imagery applied to EEG data decomposed using CSP.
Here the classifier is applied to features extracted on CSP filtered signals.

See http://en.wikipedia.org/wiki/Common_spatial_pattern and [1]

The EEGBCI dataset is documented in [2]
The data set is available at PhysioNet [3]

[1] Zoltan J. Koles. The quantitative extraction and topographic mapping
    of the abnormal components in the clinical EEG. Electroencephalography
    and Clinical Neurophysiology, 79(6):440--447, December 1991.

[2] Schalk, G., McFarland, D.J., Hinterberger, T., Birbaumer, N.,
    Wolpaw, J.R. (2004) BCI2000: A General-Purpose Brain-Computer Interface
    (BCI) System. IEEE TBME 51(6):1034-1043

[3] Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh, Mark RG,
    Mietus JE, Moody GB, Peng C-K, Stanley HE. (2000) PhysioBank,
    PhysioToolkit, and PhysioNet: Components of a New Research Resource for
    Complex Physiologic Signals. Circulation 101(23):e215-e220


.. code-block:: python

    # Authors: Martin Billinger <martin.billinger@tugraz.at>
    #
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt

    from mne import Epochs, pick_types, find_events
    from mne.channels import read_layout
    from mne.io import concatenate_raws, read_raw_edf
    from mne.datasets import eegbci
    from mne.decoding import CSP

    print(__doc__)

    # #############################################################################
    # # Set parameters and read data

    # avoid classification of evoked responses by using epochs that start 1s after
    # cue onset.
    tmin, tmax = -1., 4.
    event_id = dict(hands=2, feet=3)
    subject = 1
    runs = [6, 10, 14]  # motor imagery: hands vs feet

    raw_fnames = eegbci.load_data(subject, runs)
    raw_files = [read_raw_edf(f, preload=True) for f in raw_fnames]
    raw = concatenate_raws(raw_files)

    # strip channel names of "." characters
    raw.rename_channels(lambda x: x.strip('.'))

    # Apply band-pass filter
    raw.filter(7., 30., method='iir')

    events = find_events(raw, shortest_event=0, stim_channel='STI 014')

    picks = pick_types(raw.info, meg=False, eeg=True, stim=False, eog=False,
                       exclude='bads')

    # Read epochs (train will be done only between 1 and 2s)
    # Testing will be done with a running classifier
    epochs = Epochs(raw, events, event_id, tmin, tmax, proj=True, picks=picks,
                    baseline=None, preload=True, add_eeg_ref=False)
    epochs_train = epochs.crop(tmin=1., tmax=2., copy=True)
    labels = epochs.events[:, -1] - 2





.. rst-class:: sphx-glr-script-out

 Out::

      Downloading data from http://www.physionet.org/physiobank/database/eegmmidb/S001/S001R10.edf (2.5 MB)

    [                                        ] 0.31545 | (8 kB / 2.5 MB)       [                                        ] 0.94636 / (24 kB / 2.5 MB)       [                                        ] 1.57727 - (40 kB / 2.5 MB)       [                                        ] 2.20817 \ (56 kB / 2.5 MB)       [.                                       ] 2.83908 | (72 kB / 2.5 MB)       [.                                       ] 3.46999 / (88 kB / 2.5 MB)       [.                                       ] 4.73180 - (120 kB / 2.5 MB)       [..                                      ] 5.99362 \ (152 kB / 2.5 MB)       [..                                      ] 7.25543 | (184 kB / 2.5 MB)       [...                                     ] 8.51725 / (216 kB / 2.5 MB)       [...                                     ] 9.77906 - (248 kB / 2.5 MB)       [....                                    ] 11.04087 \ (280 kB / 2.5 MB)       [....                                    ] 12.30269 | (312 kB / 2.5 MB)       [.....                                   ] 13.56450 / (344 kB / 2.5 MB)       [.....                                   ] 14.82632 - (376 kB / 2.5 MB)       [......                                  ] 16.08813 \ (408 kB / 2.5 MB)       [......                                  ] 17.34994 | (440 kB / 2.5 MB)       [.......                                 ] 18.61176 / (472 kB / 2.5 MB)       [........                                ] 21.13539 - (536 kB / 2.5 MB)       [.........                               ] 23.65901 \ (600 kB / 2.5 MB)       [..........                              ] 26.18264 | (664 kB / 2.5 MB)       [...........                             ] 28.70627 / (728 kB / 2.5 MB)       [............                            ] 31.22990 - (792 kB / 2.5 MB)       [.............                           ] 33.75353 \ (856 kB / 2.5 MB)       [..............                          ] 36.27716 | (920 kB / 2.5 MB)       [...............                         ] 38.80078 / (984 kB / 2.5 MB)       [................                        ] 41.32441 - (1.0 MB / 2.5 MB)       [.................                       ] 43.84804 \ (1.1 MB / 2.5 MB)       [..................                      ] 46.37167 | (1.1 MB / 2.5 MB)       [...................                     ] 48.89530 / (1.2 MB / 2.5 MB)       [....................                    ] 51.41892 - (1.3 MB / 2.5 MB)       [.....................                   ] 53.94255 \ (1.3 MB / 2.5 MB)       [......................                  ] 56.46618 | (1.4 MB / 2.5 MB)       [.......................                 ] 58.98981 / (1.5 MB / 2.5 MB)       [........................                ] 61.51344 - (1.5 MB / 2.5 MB)       [.........................               ] 64.03707 \ (1.6 MB / 2.5 MB)       [..........................              ] 66.56069 | (1.6 MB / 2.5 MB)       [...........................             ] 69.08432 / (1.7 MB / 2.5 MB)       [............................            ] 71.60795 - (1.8 MB / 2.5 MB)       [.............................           ] 74.13158 \ (1.8 MB / 2.5 MB)       [..............................          ] 76.65521 | (1.9 MB / 2.5 MB)       [...............................         ] 79.17884 / (2.0 MB / 2.5 MB)       [................................        ] 81.70246 - (2.0 MB / 2.5 MB)       [.................................       ] 84.22609 \ (2.1 MB / 2.5 MB)       [..................................      ] 86.74972 | (2.1 MB / 2.5 MB)       [...................................     ] 89.27335 / (2.2 MB / 2.5 MB)       [....................................    ] 91.79698 - (2.3 MB / 2.5 MB)       [.....................................   ] 94.32060 \ (2.3 MB / 2.5 MB)       [....................................... ] 99.36786 | (2.5 MB / 2.5 MB)       [........................................] 100.00000 / (2.5 MB / 2.5 MB)   
    Downloading data from http://www.physionet.org/physiobank/database/eegmmidb/S001/S001R14.edf (2.5 MB)

    [                                        ] 0.31545 | (8 kB / 2.5 MB)       [                                        ] 0.94636 / (24 kB / 2.5 MB)       [                                        ] 1.57727 - (40 kB / 2.5 MB)       [                                        ] 2.20817 \ (56 kB / 2.5 MB)       [.                                       ] 2.83908 | (72 kB / 2.5 MB)       [.                                       ] 4.10090 / (104 kB / 2.5 MB)       [..                                      ] 5.36271 - (136 kB / 2.5 MB)       [...                                     ] 7.88634 \ (200 kB / 2.5 MB)       [....                                    ] 10.40997 | (264 kB / 2.5 MB)       [.....                                   ] 12.93359 / (328 kB / 2.5 MB)       [......                                  ] 15.45722 - (392 kB / 2.5 MB)       [.......                                 ] 17.98085 \ (456 kB / 2.5 MB)       [........                                ] 20.50448 | (520 kB / 2.5 MB)       [.........                               ] 23.02811 / (584 kB / 2.5 MB)       [..........                              ] 25.55174 - (648 kB / 2.5 MB)       [...........                             ] 28.07536 \ (712 kB / 2.5 MB)       [............                            ] 30.59899 | (776 kB / 2.5 MB)       [..............                          ] 35.64625 / (904 kB / 2.5 MB)       [................                        ] 40.69350 - (1.0 MB / 2.5 MB)       [..................                      ] 45.74076 \ (1.1 MB / 2.5 MB)       [....................                    ] 50.78802 | (1.3 MB / 2.5 MB)       [......................                  ] 55.83527 / (1.4 MB / 2.5 MB)       [........................                ] 60.88253 - (1.5 MB / 2.5 MB)       [..........................              ] 65.92979 \ (1.6 MB / 2.5 MB)       [............................            ] 70.97704 | (1.8 MB / 2.5 MB)       [..............................          ] 76.02430 / (1.9 MB / 2.5 MB)       [................................        ] 81.07156 - (2.0 MB / 2.5 MB)       [..................................      ] 86.11881 \ (2.1 MB / 2.5 MB)       [....................................    ] 91.16607 | (2.3 MB / 2.5 MB)       [......................................  ] 96.21333 / (2.4 MB / 2.5 MB)       [........................................] 100.00000 - (2.5 MB / 2.5 MB)   
    Extracting edf Parameters from /home/ubuntu/mne_data/MNE-eegbci-data/physiobank/database/eegmmidb/S001/S001R06.edf...
    Setting channel info structure...
    Creating Raw.info structure...
    Reading 0 ... 19999  =      0.000 ...   124.994 secs...
    Ready.
    Extracting edf Parameters from /home/ubuntu/mne_data/MNE-eegbci-data/physiobank/database/eegmmidb/S001/S001R10.edf...
    Setting channel info structure...
    Creating Raw.info structure...
    Reading 0 ... 19999  =      0.000 ...   124.994 secs...
    Ready.
    Extracting edf Parameters from /home/ubuntu/mne_data/MNE-eegbci-data/physiobank/database/eegmmidb/S001/S001R14.edf...
    Setting channel info structure...
    Creating Raw.info structure...
    Reading 0 ... 19999  =      0.000 ...   124.994 secs...
    Ready.
    Band-pass filtering from 7 - 30 Hz
    Removing orphaned offset at the beginning of the file.
    89 events found
    Events id: [1 2 3]
    45 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 45 events and 801 original time points ...
    0 bad epochs dropped


Classification with linear discrimant analysis


.. code-block:: python


    from sklearn.lda import LDA  # noqa
    from sklearn.cross_validation import ShuffleSplit  # noqa

    # Assemble a classifier
    svc = LDA()
    csp = CSP(n_components=4, reg=None, log=True)

    # Define a monte-carlo cross-validation generator (reduce variance):
    cv = ShuffleSplit(len(labels), 10, test_size=0.2, random_state=42)
    scores = []
    epochs_data = epochs.get_data()
    epochs_data_train = epochs_train.get_data()

    # Use scikit-learn Pipeline with cross_val_score function
    from sklearn.pipeline import Pipeline  # noqa
    from sklearn.cross_validation import cross_val_score  # noqa
    clf = Pipeline([('CSP', csp), ('SVC', svc)])
    scores = cross_val_score(clf, epochs_data_train, labels, cv=cv, n_jobs=1)

    # Printing the results
    class_balance = np.mean(labels == labels[0])
    class_balance = max(class_balance, 1. - class_balance)
    print("Classification accuracy: %f / Chance level: %f" % (np.mean(scores),
                                                              class_balance))

    # plot CSP patterns estimated on full data for visualization
    csp.fit_transform(epochs_data, labels)

    evoked = epochs.average()
    evoked.data = csp.patterns_.T
    evoked.times = np.arange(evoked.data.shape[0])

    layout = read_layout('EEG1005')
    evoked.plot_topomap(times=[0, 1, 2, 3, 4, 5], ch_type='eeg', layout=layout,
                        scale_time=1, time_format='%i', scale=1,
                        unit='Patterns (AU)', size=1.5)




.. image:: /auto_examples/decoding/images/sphx_glr_plot_decoding_csp_eeg_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

      Classification accuracy: 0.955556 / Chance level: 0.533333


Look at performance over time


.. code-block:: python


    sfreq = raw.info['sfreq']
    w_length = int(sfreq * 0.5)   # running classifier: window length
    w_step = int(sfreq * 0.1)  # running classifier: window step size
    w_start = np.arange(0, epochs_data.shape[2] - w_length, w_step)

    scores_windows = []

    for train_idx, test_idx in cv:
        y_train, y_test = labels[train_idx], labels[test_idx]

        X_train = csp.fit_transform(epochs_data_train[train_idx], y_train)
        X_test = csp.transform(epochs_data_train[test_idx])

        # fit classifier
        svc.fit(X_train, y_train)

        # running classifier: test classifier on sliding window
        score_this_window = []
        for n in w_start:
            X_test = csp.transform(epochs_data[test_idx][:, :, n:(n + w_length)])
            score_this_window.append(svc.score(X_test, y_test))
        scores_windows.append(score_this_window)

    # Plot scores over time
    w_times = (w_start + w_length / 2.) / sfreq + epochs.tmin

    plt.figure()
    plt.plot(w_times, np.mean(scores_windows, 0), label='Score')
    plt.axvline(0, linestyle='--', color='k', label='Onset')
    plt.axhline(0.5, linestyle='-', color='k', label='Chance')
    plt.xlabel('time (s)')
    plt.ylabel('classification accuracy')
    plt.title('Classification score over time')
    plt.legend(loc='lower right')
    plt.show()



.. image:: /auto_examples/decoding/images/sphx_glr_plot_decoding_csp_eeg_002.png
    :align: center




**Total running time of the script:**
(0 minutes 4.738 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_decoding_csp_eeg.py <plot_decoding_csp_eeg.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_decoding_csp_eeg.ipynb <plot_decoding_csp_eeg.ipynb>`
