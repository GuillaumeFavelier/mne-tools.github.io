

.. _example_inverse_plot_time_frequency_mixed_norm_inverse.py:


=============================================
Compute MxNE with time-frequency sparse prior
=============================================

The TF-MxNE solver is a distributed inverse method (like dSPM or sLORETA)
that promotes focal (sparse) sources (such as dipole fitting techniques).
The benefit of this approach is that:

  - it is spatio-temporal without assuming stationarity (sources properties
    can vary over time)
  - activations are localized in space, time and frequency in one step.
  - with a built-in filtering process based on a short time Fourier
    transform (STFT), data does not need to be low passed (just high pass
    to make the signals zero mean).
  - the solver solves a convex optimization problem, hence cannot be
    trapped in local minima.

References:

A. Gramfort, D. Strohmeier, J. Haueisen, M. Hamalainen, M. Kowalski
Time-Frequency Mixed-Norm Estimates: Sparse M/EEG imaging with
non-stationary source activations
Neuroimage, Volume 70, 15 April 2013, Pages 410-422, ISSN 1053-8119,
DOI: 10.1016/j.neuroimage.2012.12.051.

A. Gramfort, D. Strohmeier, J. Haueisen, M. Hamalainen, M. Kowalski
Functional Brain Imaging with M/EEG Using Structured Sparsity in
Time-Frequency Dictionaries
Proceedings Information Processing in Medical Imaging
Lecture Notes in Computer Science, 2011, Volume 6801/2011,
600-611, DOI: 10.1007/978-3-642-22092-0_49
http://dx.doi.org/10.1007/978-3-642-22092-0_49



.. rst-class:: horizontal


    *

      .. image:: images/plot_time_frequency_mixed_norm_inverse_1.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_mixed_norm_inverse_2.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_mixed_norm_inverse_3.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_mixed_norm_inverse_4.png
            :scale: 47


**Script output**::

  Convergence reached !
  Updating smoothing matrix, be patient..
  Smoothing matrix creation, step 1
  Smoothing matrix creation, step 2
  Smoothing matrix creation, step 3
  Smoothing matrix creation, step 4
  Smoothing matrix creation, step 5
  colormap: fmin=1.00e-08 fmid=1.50e-08 fmax=2.00e-08 transparent=1



**Python source code:** :download:`plot_time_frequency_mixed_norm_inverse.py <plot_time_frequency_mixed_norm_inverse.py>`

.. literalinclude:: plot_time_frequency_mixed_norm_inverse.py
    :lines: 35-

**Total running time of the example:**   21 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    