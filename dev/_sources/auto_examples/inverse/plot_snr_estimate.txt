

.. _example_inverse_plot_snr_estimate.py:


============================
Plot an estimate of data SNR
============================

This estimates the SNR as a function of time for a set of data.



.. image:: images/plot_snr_estimate_001.png
    :align: center


**Script output**::

  Preparing the inverse operator for use...
      Scaled noise and source covariance from nave = 1 to nave = 55
      Created the regularized inverter
      Created an SSP operator (subspace dimension = 3)
      Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
  Picked 305 channels from the data
  Effective nchan = 305 - 3 = 302



**Python source code:** :download:`plot_snr_estimate.py <plot_snr_estimate.py>`

.. literalinclude:: plot_snr_estimate.py
    :lines: 9-

**Total running time of the example:**    0 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    