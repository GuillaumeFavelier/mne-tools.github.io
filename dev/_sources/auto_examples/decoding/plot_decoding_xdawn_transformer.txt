

.. _sphx_glr_auto_examples_decoding_plot_decoding_xdawn_transformer.py:


====================================================================
Minimal example for using scikit-learn pipeline
====================================================================

This example creates a scikit-learn pipeline with mne transformers.






.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    Band-pass filtering from 1 - 20 Hz
    [ 0.5  0.5  1.   0.5  0.5]




|


.. code-block:: python

    # Authors: Asish Panda <asishrocks95@gmail.com>
    #
    # License: BSD (3-clause)

    from sklearn.cross_validation import cross_val_score
    from sklearn.pipeline import make_pipeline
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import label_binarize

    from mne import io, pick_types, read_events, Epochs
    from mne.datasets import sample
    from mne.decoding import Vectorizer
    from mne.preprocessing import XdawnTransformer

    data_path = sample.data_path()


    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.1, 0.3
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname, preload=True)
    raw.filter(1, 20, method='iir')
    events = read_events(event_fname)

    picks = pick_types(raw.info, meg=False, eeg=True, stim=False, eog=False,
                       exclude='bads')

    epochs = Epochs(raw, events, event_id, tmin, tmax, proj=False,
                    picks=picks, baseline=None, preload=True,
                    add_eeg_ref=False, verbose=False)

    X = epochs.get_data()
    y = label_binarize(epochs.events[:, 2], classes=[1, 3]).ravel()

    clf = make_pipeline(XdawnTransformer(n_components=3),
                        Vectorizer(),
                        LogisticRegression())
    score = cross_val_score(clf, X, y, cv=5)
    print(score)

**Total running time of the script:**
(0 minutes 1.033 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_decoding_xdawn_transformer.py <plot_decoding_xdawn_transformer.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_decoding_xdawn_transformer.ipynb <plot_decoding_xdawn_transformer.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
