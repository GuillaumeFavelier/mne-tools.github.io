

.. _sphx_glr_auto_examples_stats_plot_sensor_regression.py:


=====================================
Sensor space least squares regression
=====================================

Predict single trial activity from a continuous variable.
A single-trial regression is performed in each sensor and timepoint
individually, resulting in an :class:`mne.Evoked` object which contains the
regression coefficient (beta value) for each combination of sensor and
timepoint. Example shows the regression coefficient; the t and p values are
also calculated automatically.

Here, we repeat a few of the analyses from [1]_ by accessing the metadata
object, which contains word-level information about various
psycholinguistically relevant features of the words for which we have EEG
activity.

For the general methodology, see e.g. [2]_


References
----------
.. [1]  Dufau, S., Grainger, J., Midgley, KJ., Holcomb, PJ. A thousand
   words are worth a picture: Snapshots of printed-word processing in an
   event-related potential megastudy. Psychological Science, 2015
.. [2]  Hauk et al. The time course of visual word recognition as revealed by
   linear regression analysis of ERP data. Neuroimage, 2006




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/stats/images/sphx_glr_plot_sensor_regression_001.png
            :scale: 47

    *

      .. image:: /auto_examples/stats/images/sphx_glr_plot_sensor_regression_002.png
            :scale: 47

    *

      .. image:: /auto_examples/stats/images/sphx_glr_plot_sensor_regression_003.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Successfully extracted to: [u'/home/ubuntu/mne_data/MNE-kiloword-data']
    Reading /home/ubuntu/mne_data/MNE-kiloword-data/kword_metadata-epo.fif ...
    Isotrak not found
        Found the data of interest:
            t =    -100.00 ...     920.00 ms
            0 CTF compensation matrices available
    960 matching events found
    No baseline correction applied
    Adding metadata with 8 columns
    960 matching events found
    No baseline correction applied
    Adding metadata with 8 columns
    0 projection items activated
       WORD  Concreteness  WordFrequency  OrthographicDistance  NumberOfLetters  \
    0  film          5.45       3.189490                  1.75              4.0   
    1  cent          5.90       3.700704                  1.35              4.0   
    2  shot          4.60       2.858537                  1.20              4.0   
    3  cold          3.70       3.454540                  1.15              4.0   
    4  main          3.00       3.539076                  1.35              4.0   

       BigramFrequency  ConsonantVowelProportion  VisualComplexity  
    0           343.25                      0.75         55.783710  
    1           546.75                      0.75         63.141553  
    2           484.75                      0.75         64.600033  
    3          1095.25                      0.75         63.657457  
    4           686.00                      0.50         68.945661  
    Replacing existing metadata with 9 columns
    Fitting linear model to epochs, (7424 targets, 3 regressors)
    Done




|


.. code-block:: python

    # Authors: Tal Linzen <linzen@nyu.edu>
    #          Denis A. Engemann <denis.engemann@gmail.com>
    #          Jona Sassenhagen <jona.sassenhagen@gmail.com>
    #
    # License: BSD (3-clause)

    import pandas as pd
    import mne
    from mne.stats import linear_regression
    from mne.datasets import kiloword

    # Load the data
    path = kiloword.data_path() + '/kword_metadata-epo.fif'
    epochs = mne.read_epochs(path)
    print(epochs.metadata.head())

    # Add intercept column
    df = pd.DataFrame(epochs.metadata)
    epochs.metadata = df.assign(Intercept=[1 for _ in epochs.events])

    # Run and visualize the regression
    names = ["Intercept", "Concreteness", "BigramFrequency"]
    res = linear_regression(epochs, epochs.metadata[names], names=names)

    for cond in names:
        res[cond].beta.plot_joint(title=cond)

**Total running time of the script:** ( 0 minutes  3.035 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_sensor_regression.py <plot_sensor_regression.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_sensor_regression.ipynb <plot_sensor_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
